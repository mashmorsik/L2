package main

import (
	"errors"
)

/*
Паттерн Цепочка вызовов/Цепочка обязанностей

Паттерн проектирования "Цепочка Обязанностей" предназначен для организации обработки запросов последовательно по
цепочке обработчиков. Каждый обработчик в цепочке решает, способен ли он обработать конкретный запрос.
Если обработчик способен обработать запрос, он обрабатывает его; в противном случае он передает запрос следующему
обработчику в цепочке.

Плюсы:
- Уменьшение связанности между отправителем запроса и получателем, так как отправитель не знает, какой именно
обработчик обработает запрос;
- Позволяет динамически добавлять и удалить обработчики в цепочке;
- Позволяет упростить обработку запросов, разбивая ее на небольшие, отдельные шаги.

Минусы:
- Нет гарантии, что запрос будет обработан, поскольку он может достигнуть конца цепочки без обработки;
- Усложняет отладку из-за того, что запрос может пройти через несколько обработчиков;

Пример использования на практике: цепочка из обработчиков ошибок.
*/

var (
	ErrAuthenticationFailed     = errors.New("authentication failed")
	ErrDatabaseConnectionFailed = errors.New("database connection failed")
)

func main() {
	// Создаем обработчики ошибок
	authHandler := &AuthenticationErrorHandler{}
	dbHandler := &DatabaseErrorHandler{}
	appHandler := &ApplicationErrorHandler{}

	// Устанавливаем следующий обработчик в цепочке
	authHandler.SetNext(dbHandler)
	dbHandler.SetNext(appHandler)

	// Обрабатываем ошибки
	err := ErrDatabaseConnectionFailed
	authHandler.Handle(err)
}
