package main

/*
Паттерн Фасад

Паттерн Фасад является структурным паттерном проектирования, который предоставляет унифицированный интерфейс к
группе интерфейсов в подсистеме. Он обеспечивает более простой и удобный способ взаимодействия с комплексной
системой, скрывая детали ее внутренней работы от клиентского кода.

Плюсы:
- Сокрытие сложности: Фасад позволяет скрыть сложность внутренней структуры подсистемы от клиентского кода,
предоставляя простой и удобный интерфейс взаимодействия;
- Упрощение интерфейса: Фасад объединяет несколько компонентов подсистемы и предоставляет единый интерфейс к
их функциональности, что упрощает работу с системой;
- Снижение связанности: Клиентский код взаимодействует только с фасадом, не зависит от деталей реализации
подсистемы и не знает о ее внутренней структуре, что снижает связанность.

Минусы:
- Ограниченность функциональности: Фасад предоставляет упрощенный интерфейс к подсистеме, но не всегда может
покрыть все возможности и функциональность подсистемы. В некоторых случаях клиенту может потребоваться доступ к
более низкоуровневым возможностям, которые не предоставляются фасадом;
- Добавление сложности: В некоторых случаях использование фасада может привести к
добавлению дополнительного уровня абстракции и сложности в системе, особенно если фасад оказывается излишне сложным
или если требуется добавить новый функционал;
- Увеличение объема кода: Для реализации фасада может потребоваться создание дополнительных классов и
методов, что может привести к увеличению объема кода и усложнению его структуры.

Пример использования паттерна: система отправки уведомлений.
*/

func main() {
	// Создаем фасад для отправки уведомлений
	notificationFacade := NewNotificationFacade()

	// Отправляем уведомление через фасад
	notificationFacade.SendNotification("Hello, world!")
}
