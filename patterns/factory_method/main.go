package main

import "fmt"

/*
Паттерн Фабричный метод

Паттерн проектирования, который определяет интерфейс для создания объектов определённого типа.
Паттерн предлагает создавать объекты не напрямую, а через вызов специального фабричного метода.
Все объекты должны иметь общий интерфейс, который отвечает за их создание.

Плюсы:
- Разделение кода, создающего объекты, от кода, использующего их;
- Упрощение добавления новых типов объектов в программу;
- Собдюдение принципа открытости/закрытости (сущности программы должны быть открыты для
расширения, но закрыты для изменения).

Минусы:
- Усложнение параллельной иерархии классов;
- Необходимость создания подклассов для каждого нового типа продукта и новой фабрики для этого типа.


Пример использования на практике: Создание различных типов автомобилей.
*/

func main() {
	suzuki, _ := getCar("Suzuki")
	opel, _ := getCar("Opel")

	fmt.Println(suzuki.getCountry())
	fmt.Println(opel.getModel())
}
